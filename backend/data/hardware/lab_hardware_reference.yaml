devices:
  ## TYPE: thermometer
  ## Supported implementations:
  ## w1_therm, serial, simulation
  - id: "thermometer-w1_therm-example"
    type: "thermometer"
    # w1_therm: Supports the DS18S20, DS1822, DS18B20, DS28EA00 and DS1825/MAX31850K
    #           sensors using the 1 wire protocol. You'll need to add "dtoverlay=w1-gpio"
    #           to /boot/config.txt and reboot to use this on a pi, see https://github.com/libre-computer-project/libretech-wiring-tool
    #           for enabling the w1-gpio overlay on the AML-S905X-CC
    implementation: "w1_therm"

  - id: "thermometer-serial-example"
    type: "thermometer"
    # serial: reads the sensor data from a serial device
    implementation: "serial"
    # Which device to read data from.
    serialDevice: "/dev/ttyUSB0"

  - id: "thermometer-simulation-example"
    type: "thermometer"
    # Simulates an actual thermometer. Only reads one temperature value.
    implementation: "simulation"
    # what temperature should this thermometer always read at
    temp: 24

  ## TYPE: tempController
  ## Supported implementations:
  ## basic, simulation
  - id: "tempController-basic-example"
    type: "tempController"
    # basic: Basic hardware setup using two sets of pumps and a heating element
    #        some currently incomplete instructions for this are in docs/assembly
    implementation: "basic"
    # device ID of the thermometer to use for detecting reactor temperature
    thermometerID: "reactor-thermometer"
    # Maximum and minimum temperature in Celsius that the hardware can support
    # The microlab v0.5 makes use of 3d printed parts made of PLA, PLA can only reach
    # ~60C before it begins to mechanically fail. If you print with a different material,
    # this may be increased, search for the glass transition temperature for your material.
    # Water of course also boils at 100C, and will slowly boil off somewhat below that
    # so consider something like Propylene Glycol instead of water as a heat exchanger fluid.
    # Also keep in mind the recommended thermometer (DS18S20) only supports -55 to 125C.
    maxTemp: 50
    minTemp: -20
    # id of the gpio device that controls the pins. In most cases
    # gpio-primary will be correct.
    gpioID: "gpio-primary"
    # GPIO pin for activating the heating element
    heaterPin: BCM_26
    # GPIO pin for activating the heater pump(s)
    heaterPumpPin: BCM_20
    # GPIO pin for activating the cooler pump(s)
    coolerPin: BCM_21
    # Optional dictionary specifying PID controller parameters.
    # If not set uses a simple on/off for controlling temperature
    # based on current readings and recipe temperature tolerances.
    pidConfig:
      # PID values, required
      P: 1
      I: 0.5
      D: 5
      ### All the following parameters of pidConfig are optional ###

      # When true uses the measurement to calculate the proportional term.
      # False uses the error instead.
      # Defaults to False
      proportionalOnMeasurement: False
      # When true uses the measurement to calculate the differential term.
      # False uses the error instead.
      # Defaults to True
      differentialOnMeasurement: True
      # Min output of the PID controller
      # Defaults to -100
      minOutput: -100
      # Max output of the PID controller
      # Defaults to 100
      maxOutput: 100
      # Total length of the duty cycle for controlling the heater and cooler in seconds.
      # Defaults to 10
      dutyCycleLength: 10
    # list of device IDs that must be setup before this device
    dependencies: ["reactor-thermometer"]

  - id: "tempController-simulation-example"
    type: "tempController"
    # simulation: Simulates temperature changes due to heater and cooler activation
    implementation: "simulation"
    # Maximum and minimum temperature in Celsius that the hardware can support
    maxTemp: 50
    minTemp: -20
    # Optional. Starting temperature in Celsius, defaults to 24 if not set
    temp: 24

  ## TYPE: reagentDispenser
  ## Supported implementations:
  ## peristalticpump, syringepump, simulation
  - id: "reagentDispenser-peristalticpump-example"
    type: "reagentDispenser"
    implementation: "peristalticpump"
    # grbl device id
    grblID: "grbl-primary"
    # Configuration for the peristaltic pump motors
    peristalticPumpsConfig:
      # F: max feed rate in mm/min
      F: 175
      X:
        # scaling factor based on initial calibration
        mmPerMl: 0.5555555
      Y:
        # scaling factor based on initial calibration
        mmPerMl: 0.5555555
      Z:
        # scaling factor based on initial calibration
        mmPerMl: 0.5555555

  - id: "reagentDispenser-syringepump-example"
    type: "reagentDispenser"
    # syringepump: The open source syringe pump referenced in the assembly documentation
    #              Uses grbl and stepper motors to dispense the reagents into the microlab
    implementation: "syringepump"
    # grbl device id
    grblID: "grbl-primary"
    # Configuration for the syringe pump motors
    syringePumpsConfig:
      X:
        # Number of mm the stepper motor moves per full revolution,
        # this is the pitch of the threaded rod
        mmPerRev: 0.8
        # Number of steps per revolution of the stepper motor, reference the documentation for the motor
        stepsPerRev: 200
        # Number of mm of movement needed to dispense 1 ml of fluid,
        # this is the length of the syringe divided by its fluid capacity
        mmPerMl: 3.5
        # Maximum speed the motor should run in mm/min
        maxMmPerMin: 240
      Y:
        # These are all the same as documented above but for the Y axis
        mmPerRev: 0.8
        stepsPerRev: 200
        mmPerMl: 3.5
        maxMmPerMin: 240
      Z:
        # These are all the same as documented above but for the Z axis
        mmPerRev: 0.8
        stepsPerRev: 200
        mmPerMl: 3.5
        maxMmPerMin: 240

  - id: "reagentDispenser-simulation-example"
    type: "reagentDispenser"
    # simulation: Does nothing but sleep to simulate dispensing a reagent
    implementation: "simulation"

  ## TYPE: stirrer
  ## Supported implementations:
  ## gpio_stirrer, simulation
  - id: "stirrer-gpio_stirrer-example"
    type: "stirrer"
    # gpio_stirrer: activates the stirrer by switching a gpio pin
    implementation: "gpio_stirrer"
    # id of the gpio device that controls the pin. In most cases
    # gpio-primary will be correct.
    gpioID: "gpio-primary"
    # GPIO pin for activating the stirrer
    stirrerPin: BCM_16

  - id: "stirrer-simulation-example"
    type: "stirrer"
    # simulation: Does nothing
    implementation: "simulation"

  ## TYPE: grbl
  ## Supported implementations:
  ## serial, simulation
  - id: "grbl-serial-example"
    type: "grbl"
    # serial: opens a serial device to send commands to grbl
    implementation: "serial"
    # device path for opening a serial connection to grbl
    grblPort: "/dev/ttyACM0"

  - id: "grbl-simulation-example"
    type: "grbl"
    # simulation: Does nothing
    implementation: "simulation"
